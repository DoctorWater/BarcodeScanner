// <auto-generated />
using System;
using System.Collections.Generic;
using BarcodeDecodeDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BarcodeDecodeDataAccess.Migrations
{
    [DbContext(typeof(BarcodeDecodeDbContext))]
    [Migration("20250322204950_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BarcodeDecodeLib.Entities.LocationTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArrivedAtLocation")
                        .HasColumnType("integer")
                        .HasColumnName("arrived_at_location");

                    b.Property<DateTimeOffset?>("ArrivedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrived_on");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("DepartureLocation")
                        .HasColumnType("integer")
                        .HasColumnName("departure_location");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("error_message");

                    b.Property<List<int>>("PlannedLocations")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("planned_locations");

                    b.Property<int>("SortingErrorCode")
                        .HasColumnType("integer")
                        .HasColumnName("sorting_error_code");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TransportStorageUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_storage_unit_id");

                    b.HasKey("Id")
                        .HasName("pk_location_tickets");

                    b.HasIndex("ArrivedAtLocation")
                        .HasDatabaseName("ix_location_tickets_arrived_at_location");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_location_tickets_created_on");

                    b.HasIndex("DepartureLocation")
                        .HasDatabaseName("ix_location_tickets_departure_location");

                    b.HasIndex("TransportStorageUnitId")
                        .HasDatabaseName("ix_location_tickets_transport_storage_unit_id");

                    b.ToTable("location_tickets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivedAtLocation = 11,
                            ArrivedOn = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 49, 20, 185, DateTimeKind.Unspecified).AddTicks(3241), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedOn = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 49, 10, 185, DateTimeKind.Unspecified).AddTicks(3242), new TimeSpan(0, 3, 0, 0, 0)),
                            DepartureLocation = 10,
                            PlannedLocations = new List<int> { 11, 12 },
                            SortingErrorCode = 0,
                            Status = 3,
                            TransportStorageUnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArrivedOn = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 49, 40, 185, DateTimeKind.Unspecified).AddTicks(3246), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedOn = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 49, 30, 185, DateTimeKind.Unspecified).AddTicks(3248), new TimeSpan(0, 3, 0, 0, 0)),
                            DepartureLocation = 11,
                            PlannedLocations = new List<int> { 13 },
                            SortingErrorCode = 0,
                            Status = 2,
                            TransportStorageUnitId = 1
                        });
                });

            modelBuilder.Entity("BarcodeDecodeLib.Entities.TransportOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<DateTimeOffset?>("ClosedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_on");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<List<int>>("Destinations")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("destinations");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_transport_orders");

                    b.HasIndex("Barcode")
                        .HasDatabaseName("ix_transport_orders_barcode");

                    b.HasIndex("ClosedOn")
                        .HasDatabaseName("ix_transport_orders_closed_on");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_transport_orders_created_on");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_transport_orders_status");

                    b.ToTable("transport_orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "SomeBarcode1",
                            CreatedOn = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 48, 50, 185, DateTimeKind.Unspecified).AddTicks(3174), new TimeSpan(0, 3, 0, 0, 0)),
                            Destinations = new List<int> { 13 },
                            ExternalId = "1aae532d-ccc5-4ea7-aae2-c4db55b6ecbb",
                            Status = 2
                        });
                });

            modelBuilder.Entity("BarcodeDecodeLib.Entities.TransportStorageUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("TransportOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_order_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_transport_storage_units");

                    b.HasIndex("TransportOrderId")
                        .HasDatabaseName("ix_transport_storage_units_transport_order_id");

                    b.HasIndex("UpdatedOn")
                        .HasDatabaseName("ix_transport_storage_units_updated_on");

                    b.HasIndex("Barcode", "Status")
                        .HasDatabaseName("ix_transport_storage_units_barcode_status");

                    b.HasIndex("Status", "UpdatedOn")
                        .HasDatabaseName("ix_transport_storage_units_status_updated_on");

                    b.ToTable("transport_storage_units", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "SomeBarcode1",
                            CreatedOn = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 48, 50, 185, DateTimeKind.Unspecified).AddTicks(3236), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 1,
                            TransportOrderId = 1,
                            UpdatedOn = new DateTimeOffset(new DateTime(2025, 3, 22, 23, 48, 50, 185, DateTimeKind.Unspecified).AddTicks(3238), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BarcodeDecodeLib.Entities.LocationTicket", b =>
                {
                    b.HasOne("BarcodeDecodeLib.Entities.TransportStorageUnit", "TransportStorageUnit")
                        .WithMany("LocationTickets")
                        .HasForeignKey("TransportStorageUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_tickets_transport_storage_units_transport_storage_");

                    b.Navigation("TransportStorageUnit");
                });

            modelBuilder.Entity("BarcodeDecodeLib.Entities.TransportStorageUnit", b =>
                {
                    b.HasOne("BarcodeDecodeLib.Entities.TransportOrder", "TransportOrder")
                        .WithMany()
                        .HasForeignKey("TransportOrderId")
                        .HasConstraintName("fk_transport_storage_units_transport_orders_transport_order_id");

                    b.Navigation("TransportOrder");
                });

            modelBuilder.Entity("BarcodeDecodeLib.Entities.TransportStorageUnit", b =>
                {
                    b.Navigation("LocationTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
